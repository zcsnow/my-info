#!/usr/bin/env node //表明是 node 可执行文件

//模块依赖
var app = require('../app');  //app.js导出的app实例
var debug = require('debug')('videohls:server');  //引入debug模块，打印调试日志
var http = require('http'); 


//得到环境变量中设置的PORT或者手动设置PORT，然后赋予到app实例中。
var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

//创建http server实例
var server = http.createServer(app);

server.listen(port);//监听端口
server.on('error', onError); //指定发生错误时的处理方法
server.on('listening', onListening); //指定监听成功时的回调方法
var io = app.io;
io.attach(server);

//normalizePort函数，规范端口参数的格式
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
//onError函数，错误处理方法。
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
//onListening函数，监听成功的方法。
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
